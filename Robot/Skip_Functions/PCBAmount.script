def PCBAmount():
  global _hidden_verificationVariable=0
  step_count_fb48d3ff_0c9f_4d99_a765_ea41926c28d5 = 0.0
  thread Step_Counter_Thread_a9617a2c_6c0b_4ca4_aaba_c79477845290():
    while (True):
      step_count_fb48d3ff_0c9f_4d99_a765_ea41926c28d5 = step_count_fb48d3ff_0c9f_4d99_a765_ea41926c28d5 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_a9617a2c_6c0b_4ca4_aaba_c79477845290()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.530000, [0.009000, -0.039000, 0.092000], [0.000534, 0.000534, 0.000534, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
  global Al_plate=p[0.12405209206180495,-0.2666666051843552,0.020008101224669964,-9.276623980477388E-5,1.8107917580596192E-5,3.1233857134705927]
  global Frame2x2=p[0.18266245434305164,-0.34273121659514855,0.026002571110600767,-2.225423529876215E-4,3.0110667546023537E-4,3.1233976058306383]
  global Plane_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global URlogoTutorial=p[-0.08178353973148575,-0.3363174165299142,0.04788621506469384,-3.9746155723688456E-5,-3.4682148779121894E-5,-1.5668291789091222]
  global carousel=p[0.13865255139760183,-0.25132593351268107,0.051531504137083003,-4.453572132438073E-5,-1.3071222590669835E-4,-3.1349676625391965]
  global carouselrod=p[0.2020731702281844,-0.34951442511341274,0.1947611446273096,3.139766958234101,-0.10689428010274801,-1.1796370330365635E-5]
  global paper=p[-0.09670794781244417,-0.3283412964648025,0.027665994240809913,-3.2057893450593004E-5,2.867088716161181E-5,-1.6085327915291054]
  global rod=p[0.13368013097420872,-0.41123185103490206,0.09926814901395645,2.2214229924093103,-2.2214158162465862,-2.9165882738638143E-5]
  global timer_1=0
  global c1_p=p[.125738752802, -.309410048563, .138287167472, -3.141084266097, .028629602256, .002926899027]
  global c1_q=[-0.7802909056292933, -1.635789533654684, -1.765841007232666, -1.311596469288208, 1.5709946155548096, 3.949096441268921]
  global c2_p=p[.027797883872, -.310052556936, .138296936244, -3.141095248787, .028371234673, .002751820731]
  global c2_q=[-1.0453041235553187, -1.5337239068797608, -1.8696417808532715, -1.3094714444926758, 1.5706055164337158, 3.683958053588867]
  global Waypoint_16_p=p[-.125097928533, -.271984222044, .188211676824, -3.139810722578, .105446315311, .000070958927]
  global Waypoint_16_q=[-1.5480602423297327, -1.4491210740855713, -1.7099264860153198, -1.552596167927124, 1.5715936422348022, 3.23006010055542]
  global Waypoint_17_p=p[-.141183217597, -.367684006591, .188213447751, 3.139821760490, -.105397104768, -.000067867997]
  global Waypoint_17_q=[-1.597567383443014, -1.8740092716612757, -1.241610050201416, -1.5960084400572718, 1.5719740390777588, 3.1803600788116455]
  global Waypoint_18_p=p[-.141178244459, -.367687282910, .108904454765, 3.139816402425, -.105408093734, -.000060814483]
  global Waypoint_18_q=[-1.5975983778582972, -1.9245020351805628, -1.550661325454712, -1.2364590925029297, 1.5723340511322021, 3.1807193756103516]
  global Waypoint_19_p=p[-.141189357305, -.367687267469, .108915260822, 3.121780755938, .351957921543, -.000099281586]
  global Waypoint_19_q=[-1.5976179281817835, -1.9244748554625453, -1.550661325454712, -1.2364507478526612, 1.572314977645874, 2.889045000076294]
  global Waypoint_20_p=p[-.141176698746, -.367682773595, .108907204798, -3.111042719163, .436975672702, .000063164110]
  global Waypoint_20_q=[-1.5975945631610315, -1.9244939289488734, -1.5506495237350464, -1.2365017098239441, 1.5723340511322021, 3.3926987648010254]
  global Waypoint_21_p=p[-.141174078526, -.367696805030, .108909057026, 3.139786221315, -.105395786134, -.000060564502]
  global Waypoint_21_q=[-1.597586456929342, -1.9245058498778285, -1.5506460666656494, -1.2364399594119568, 1.5723340511322021, 3.1807241439819336]
  global Waypoint_22_p=p[-.125093999497, -.367099400456, .187371407622, 3.139783011421, -.105392168035, -.000053869150]
  global Waypoint_22_q=[-1.5538747946368616, -1.846323629418844, -1.2822730541229248, -1.5829936466612757, 1.5719654560089111, 3.224064588546753]
  global Waypoint_23_p=p[-.120064390322, -.465070651334, .187365924664, 2.700279766902, -.088400420341, .019763045538]
  global Waypoint_23_q=[-1.5412524382220667, -1.9475652180113734, -1.406833291053772, -0.9173591893962403, 1.5603561401367188, 3.2332537174224854]
  global Waypoint_24_p=p[-.125099110421, -.299097154487, .189878767902, 3.139750209928, -.105401717856, -.000111797080]
  global Waypoint_24_q=[-1.550074879323141, -1.5617311683348198, -1.5979981422424316, -1.5518303674510499, 1.5716702938079834, 3.2279696464538574]
  global Waypoint_1_p=p[.263501689877, -.337317763427, .239349489480, 3.139797243720, -.105347053477, -.000037720516]
  global Waypoint_1_q=[-0.5959728399859827, -2.1057659588255824, -0.6533136367797852, -1.9525557957091273, 1.5718059539794922, 4.181682586669922]
  global Waypoint_2_p=p[.265438435610, -.352444474661, .141740907029, 3.139726376264, -.105360108121, -.000022031768]
  global Waypoint_2_q=[-0.6231134573565882, -2.1016999683775843, -1.126999020576477, -1.4828875821879883, 1.5722739696502686, 4.154912948608398]
  global Waypoint_3_p=p[.206441973084, -.349241721273, .141737893294, 3.139734184252, -.105329347268, -.000022485776]
  global Waypoint_3_q=[-0.7073677221881312, -1.9410401783385218, -1.3681066036224365, -1.4024366003325959, 1.5721865892410278, 4.070710182189941]
  global Waypoint_4_p=p[.157616611756, -.378012026932, .141738203587, 3.139764187573, -.105376653239, -.000076760662]
  global Waypoint_4_q=[-0.8494070211993616, -1.9579774341978968, -1.3439116477966309, -1.409730003481247, 1.5722019672393799, 3.928692579269409]
  global Waypoint_5_p=p[.109134761588, -.393436595889, .141742225598, 3.139732501163, -.105376381431, -.000050533951]
  global Waypoint_5_q=[-0.972816292439596, -1.9523960552611292, -1.3519116640090942, -1.4072665137103577, 1.5721949338912964, 3.805286407470703]
  global Waypoint_6_p=p[-.188131250090, -.345166366147, .141750553976, 3.139727051239, -.105353578209, -.000024875816]
  global Waypoint_6_q=[-1.7293437162982386, -1.8864180050291957, -1.4439769983291626, -1.381135032778122, 1.572224736213684, 3.0487747192382812]
  global Waypoint_7_p=p[-.131564048097, -.216205376465, .141741700579, 3.139714533984, -.105382776464, -.000044168049]
  global Waypoint_7_q=[-1.572542969380514, -1.2417927545360108, -2.0833356380462646, -1.3863917154124756, 1.571577787399292, 3.2058310508728027]
  global chipC_p=p[-.099703384862, -.202952364142, .208439850600, 3.139657619359, -.105437397760, -.000145108772]
  global chipC_q=[-1.4082325140582483, -1.0998719197562714, -1.8470008373260498, -1.7646123371519984, 1.5710017681121826, 3.3699307441711426]
  global Waypoint_15_p=p[-.099704296715, -.202951379992, .208432580258, 3.139670120847, -.105426183766, -.000160358536]
  global Waypoint_15_q=[-1.4082286993609827, -1.099871740942337, -1.8470300436019897, -1.764597078362936, 1.5709946155548096, 3.369927167892456]
  global timer_1_is_counting=False
  thread Timer_Thread():
    while (True):
      if (timer_1_is_counting):
        timer_1 = timer_1 + get_steptime()
      end
      sync()
    end
  end
  run Timer_Thread()
  def CircleAllangles():
    $ 359 "CircleAllangles" "noBreak"
    $ 360 "p0≔p[c[0]+r,c[1],c[2],c[3],c[4],c[5]-1.5*A]"
    global p0=p[c[0]+r,c[1],c[2],c[3],c[4],c[5]-1.5*A]
    $ 361 "p45≔p[c[0]+0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]-A/1.1]"
    global p45=p[c[0]+0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]-A/1.1]
    $ 362 "p90≔p[c[0],c[1]+r,c[2],c[3]-A,c[4],c[5]]"
    global p90=p[c[0],c[1]+r,c[2],c[3]-A,c[4],c[5]]
    $ 363 "p135≔p[c[0]-0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]+A/1.1]"
    global p135=p[c[0]-0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]+A/1.1]
    $ 364 "p180≔p[c[0]-r,c[1],c[2],c[3],c[4],c[5]+1.5*A]"
    global p180=p[c[0]-r,c[1],c[2],c[3],c[4],c[5]+1.5*A]
    $ 365 "p225≔p[c[0]-0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]+A/1.1]"
    global p225=p[c[0]-0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]+A/1.1]
    $ 366 "p270≔p[c[0],c[1]-r,c[2],c[3]+A,c[4],c[5]]"
    global p270=p[c[0],c[1]-r,c[2],c[3]+A,c[4],c[5]]
    $ 367 "p315≔p[c[0]+0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]-A/1.1]"
    global p315=p[c[0]+0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]-A/1.1]
    $ 368 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 369 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 370 "MoveL"
    $ 371 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.35, r=0.005)
    $ 373 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.35, r=0.005)
    $ 375 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.35, r=0.005)
    $ 377 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.35, r=0.005)
    $ 379 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.35, r=0.005)
    $ 384 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.35, r=0.005)
    $ 386 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.35, r=0.005)
    $ 388 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.35, r=0.005)
    $ 390 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.35, r=0.005)
    $ 392 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.35, r=0.005)
    $ 397 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.35, r=0.005)
    $ 404 "Set atomization=Off"
    set_standard_digital_out(1, False)
    $ 405 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
  end
  def clean():
    $ 406 "clean" "noBreak"
    $ 407 "MoveJ"
    $ 408 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 409 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 410 "MoveL"
    $ 411 "Waypoint_18" "breakAfter"
    movel(Waypoint_18_p, a=1.2, v=0.05)
    $ 412 "MoveL"
    $ 413 "Waypoint_19" "breakAfter"
    movel(Waypoint_19_p, a=1.2, v=0.05)
    $ 414 "MoveL"
    $ 415 "Waypoint_20" "breakAfter"
    movel(Waypoint_20_p, a=1.2, v=0.05)
    $ 416 "MoveL"
    $ 417 "Waypoint_21" "breakAfter"
    movel(Waypoint_21_p, a=1.2, v=0.05)
    $ 418 "MoveL"
    $ 419 "Waypoint_22" "breakAfter"
    movel(Waypoint_22_p, a=1.2, v=0.25)
    $ 420 "MoveJ"
    $ 421 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 422 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 423 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 424 "Wait: 0.2"
    sleep(0.2)
    $ 425 "Set atomization=Off"
    set_standard_digital_out(1, False)
    $ 426 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 427 "MoveJ"
    $ 428 "Waypoint_24" "breakAfter"
    movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def turntable():
    $ 429 "turntable" "noBreak"
    $ 430 "MoveJ"
    $ 431 "Waypoint_1" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_1_p)), qnear=Waypoint_1_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 432 "Waypoint_2" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_2_p)), qnear=Waypoint_2_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 433 "Waypoint_3" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_3_p)), qnear=Waypoint_3_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 434 "Waypoint_4" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_4_p)), qnear=Waypoint_4_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 435 "Waypoint_5" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_5_p)), qnear=Waypoint_5_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 436 "MoveJ"
    $ 437 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_6_p)), qnear=Waypoint_6_q), a=1.3962634015954636, v=0.3141592653589793)
    $ 438 "Wait: 1.0"
    sleep(1.0)
    $ 439 "MoveJ"
    $ 440 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943891, -.334963115575, .194760490898, -3.139766958268, .106894280104, .000011796377], Waypoint_7_p)), qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976, r=0.02)
  end
  def Spraychip2():
    $ 441 "Spraychip2" "noBreak"
    $ 442 "MoveJ"
    $ 443 "chipC" "breakAfter"
    movej(get_inverse_kin(chipC_p, qnear=chipC_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 444 "c≔chipC"
    global c=chipC_p
    $ 445 "rc≔27/1000"
    global rc=27/1000
    $ 446 "p0≔p[c[0]+rc,c[1],c[2],c[3],c[4],c[5]-1.5*0]"
    global p0=p[c[0]+rc,c[1],c[2],c[3],c[4],c[5]-1.5*0]
    $ 447 "p45≔p[c[0]+0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]-0/1.1]"
    global p45=p[c[0]+0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]-0/1.1]
    $ 448 "p90≔p[c[0],c[1]+rc,c[2],c[3]-0,c[4],c[5]]"
    global p90=p[c[0],c[1]+rc,c[2],c[3]-0,c[4],c[5]]
    $ 449 "p135≔p[c[0]-0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]+0/1.1]"
    global p135=p[c[0]-0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]+0/1.1]
    $ 450 "p180≔p[c[0]-rc,c[1],c[2],c[3],c[4],c[5]+1.5*0]"
    global p180=p[c[0]-rc,c[1],c[2],c[3],c[4],c[5]+1.5*0]
    $ 451 "p225≔p[c[0]-0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]+0/1.1]"
    global p225=p[c[0]-0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]+0/1.1]
    $ 452 "p270≔p[c[0],c[1]-rc,c[2],c[3]+0,c[4],c[5]]"
    global p270=p[c[0],c[1]-rc,c[2],c[3]+0,c[4],c[5]]
    $ 453 "p315≔p[c[0]+0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]-0/1.1]"
    global p315=p[c[0]+0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]-0/1.1]
    $ 454 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 455 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 456 "MoveL"
    $ 457 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.085, r=0.01)
    $ 458 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.085, r=0.01)
    $ 459 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.085, r=0.01)
    $ 460 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.085, r=0.01)
    $ 461 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.085, r=0.01)
    $ 463 "Wait: 0.1"
    sleep(0.1)
    $ 465 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.085, r=0.01)
    $ 466 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.085, r=0.01)
    $ 467 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.085, r=0.01)
    $ 468 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.085, r=0.01)
    $ 469 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.085, r=0.01)
    $ 471 "Wait: 0.1"
    sleep(0.1)
    $ 473 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.085, r=0.01)
    $ 474 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.085, r=0.01)
    $ 475 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.085, r=0.01)
    $ 476 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.085, r=0.01)
    $ 477 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.085, r=0.01)
    $ 478 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.085, r=0.01)
    $ 479 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.085, r=0.01)
    $ 480 "MoveJ"
    $ 481 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 482 "Wait: 0.2"
    sleep(0.2)
    $ 483 "Set atomization=Off"
    set_standard_digital_out(1, False)
    $ 484 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
  end
  while (True):
    $ 2 "Robot Program"
    $ 3 "'Program to be used for part #124517-053'"
    # 'Program to be used for part #124517-053'
    $ 4 "'Program rev ___: mm/dd/yy note'"
    # 'Program rev ___: mm/dd/yy note'
    $ 5 "timer_1: Start"
    timer_1_is_counting = True
    $ 6 "r≔1/1000"
    global r=1/1000
    $ 7 "A≔3*3.1416/180"
    global A=3*3.1416/180
    $ 9 "coatnum≔2"
    global coatnum=2
    $ 11 "partnum≔2"
    global partnum=2
    $ 12 "sidenum≔2"
    global sidenum=2
    $ 13 "Loop_1≔1"
    global Loop_1=1
    $ 14 "If partnum≤sidenum"
    global thread_flag_14=0
    thread Thread_if_14():
      $ 15 "Loop (coatnum)>0"
      thread Thread_while_15():
        while (True):
          $ 16 "partleft≔partnum"
          global partleft=partnum
          $ 17 "loopnum≔1"
          global loopnum=1
          $ 18 "Loop partleft>0"
          thread Thread_while_18():
            while (True):
              $ 19 "Call clean"
              clean()
              $ 20 "Call Spraychip2"
              Spraychip2()
              $ 21 "If loopnum≟1 or loopnum≟3 or loopnum≟5 or loopnum≟7 or loopnum≟9 or loopnum≟11"
              global thread_flag_21=0
              thread Thread_if_21():
                $ 51 "MoveJ"
                $ 52 "c1" "breakAfter"
                movej(get_inverse_kin(c1_p, qnear=c1_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 53 "c≔c1"
                global c=c1_p
                $ 54 "Call CircleAllangles"
                CircleAllangles()
                $ 55 "x2≔p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]"
                global x2=p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]
                $ 56 "x3≔p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x3=p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 57 "x4≔p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x4=p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 58 "MoveJ"
                $ 59 "x2" "breakAfter"
                movej(x2, a=1.3962634015954636, v=1.0471975511965976)
                $ 60 "c≔x2"
                global c=x2
                $ 61 "Call CircleAllangles"
                CircleAllangles()
                $ 62 "MoveJ"
                $ 63 "x3" "breakAfter"
                movej(x3, a=1.3962634015954636, v=1.0471975511965976)
                $ 64 "c≔x3"
                global c=x3
                $ 65 "Call CircleAllangles"
                CircleAllangles()
                $ 66 "MoveJ"
                $ 67 "x4" "breakAfter"
                movej(x4, a=1.3962634015954636, v=1.0471975511965976)
                $ 68 "c≔x4"
                global c=x4
                $ 69 "Call CircleAllangles"
                CircleAllangles()
                thread_flag_21 = 1
              end
              if (loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                global thread_handler_21=run Thread_if_21()
                while (thread_flag_21 == 0):
                  if not(loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                    kill thread_handler_21
                    thread_flag_21 = 2
                  else:
                    sync()
                  end
                end
              else:
                thread_flag_21 = 2
              end
              if (thread_flag_21 == 2):
                $ 70 "Else" "noBreak"
                $ 99 "MoveJ"
                $ 100 "c2" "breakAfter"
                movej(get_inverse_kin(c2_p, qnear=c2_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 101 "c≔c2"
                global c=c2_p
                $ 102 "Call CircleAllangles"
                CircleAllangles()
                $ 103 "x2≔p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]"
                global x2=p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]
                $ 104 "x3≔p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x3=p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 105 "x4≔p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x4=p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 106 "MoveJ"
                $ 107 "x2" "breakAfter"
                movej(x2, a=1.3962634015954636, v=1.0471975511965976)
                $ 108 "c≔x2"
                global c=x2
                $ 109 "Call CircleAllangles"
                CircleAllangles()
                $ 110 "MoveJ"
                $ 111 "x3" "breakAfter"
                movej(x3, a=1.3962634015954636, v=1.0471975511965976)
                $ 112 "c≔x3"
                global c=x3
                $ 113 "Call CircleAllangles"
                CircleAllangles()
                $ 114 "MoveJ"
                $ 115 "x4" "breakAfter"
                movej(x4, a=1.3962634015954636, v=1.0471975511965976)
                $ 116 "c≔x4"
                global c=x4
                $ 117 "Call CircleAllangles"
                CircleAllangles()
              end
              $ 118 "loopnum≔loopnum+1"
              global loopnum=loopnum+1
              $ 119 "partleft≔partleft-1"
              global partleft=partleft-1
            end
          end
          if (partleft>0):
            global thread_handler_18=run Thread_while_18()
            while (partleft>0):
              sync()
            end
            kill thread_handler_18
          end
          $ 120 "i≔0"
          global i=0
          $ 121 "coatnum≔coatnum-1"
          global coatnum=coatnum-1
        end
      end
      if ((coatnum)>0):
        global thread_handler_15=run Thread_while_15()
        while ((coatnum)>0):
          sync()
        end
        kill thread_handler_15
      end
      $ 122 "Halt"
      halt
      thread_flag_14 = 1
    end
    if (partnum <= sidenum):
      global thread_handler_14=run Thread_if_14()
      while (thread_flag_14 == 0):
        if not(partnum <= sidenum):
          kill thread_handler_14
          thread_flag_14 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_14 = 2
    end
    if (thread_flag_14 == 2):
      $ 123 "Else" "noBreak"
      $ 124 "Loop (coatnum)>0"
      thread Thread_while_124():
        while (True):
          $ 125 "partleft≔partnum"
          global partleft=partnum
          $ 126 "loopnum≔1"
          global loopnum=1
          $ 127 "turnnum≔0"
          global turnnum=0
          $ 128 "Loop partleft>0"
          thread Thread_while_128():
            while (True):
              $ 129 "Call CircleAllangles"
              CircleAllangles()
              $ 130 "Call Spraychip2"
              Spraychip2()
              $ 131 "If loopnum≟1 or loopnum≟3 or loopnum≟5 or loopnum≟7 or loopnum≟9 or loopnum≟11"
              global thread_flag_131=0
              thread Thread_if_131():
                $ 161 "MoveJ"
                $ 162 "c1" "breakAfter"
                movej(get_inverse_kin(c1_p, qnear=c1_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 163 "c≔c1"
                global c=c1_p
                $ 164 "Call CircleAllangles"
                CircleAllangles()
                $ 165 "x2≔p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]"
                global x2=p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]
                $ 166 "x3≔p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x3=p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 167 "x4≔p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x4=p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 168 "MoveJ"
                $ 169 "x2" "breakAfter"
                movej(x2, a=1.3962634015954636, v=1.0471975511965976)
                $ 170 "c≔x2"
                global c=x2
                $ 171 "Call CircleAllangles"
                CircleAllangles()
                $ 172 "MoveJ"
                $ 173 "x3" "breakAfter"
                movej(x3, a=1.3962634015954636, v=1.0471975511965976)
                $ 174 "c≔x3"
                global c=x3
                $ 175 "Call CircleAllangles"
                CircleAllangles()
                $ 176 "MoveJ"
                $ 177 "x4" "breakAfter"
                movej(x4, a=1.3962634015954636, v=1.0471975511965976)
                $ 178 "c≔x4"
                global c=x4
                $ 179 "Call CircleAllangles"
                CircleAllangles()
                thread_flag_131 = 1
              end
              if (loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                global thread_handler_131=run Thread_if_131()
                while (thread_flag_131 == 0):
                  if not(loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                    kill thread_handler_131
                    thread_flag_131 = 2
                  else:
                    sync()
                  end
                end
              else:
                thread_flag_131 = 2
              end
              if (thread_flag_131 == 2):
                $ 180 "Else" "noBreak"
                $ 211 "MoveJ"
                $ 212 "c2" "breakAfter"
                movej(get_inverse_kin(c2_p, qnear=c2_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 213 "c≔c2"
                global c=c2_p
                $ 214 "Call CircleAllangles"
                CircleAllangles()
                $ 215 "x2≔p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]"
                global x2=p[c[0]-0.0375,c[1],c[2],c[3],c[4],c[5]]
                $ 216 "x3≔p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x3=p[c[0]-0.0375,c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 217 "x4≔p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]"
                global x4=p[c[0],c[1]+0.0375,c[2],c[3],c[4],c[5]]
                $ 218 "MoveJ"
                $ 219 "x2" "breakAfter"
                movej(x2, a=1.3962634015954636, v=1.0471975511965976)
                $ 220 "c≔x2"
                global c=x2
                $ 221 "Call CircleAllangles"
                CircleAllangles()
                $ 222 "MoveJ"
                $ 223 "x3" "breakAfter"
                movej(x3, a=1.3962634015954636, v=1.0471975511965976)
                $ 224 "c≔x3"
                global c=x3
                $ 225 "Call CircleAllangles"
                CircleAllangles()
                $ 226 "MoveJ"
                $ 227 "x4" "breakAfter"
                movej(x4, a=1.3962634015954636, v=1.0471975511965976)
                $ 228 "c≔x4"
                global c=x4
                $ 229 "Call CircleAllangles"
                CircleAllangles()
              end
              $ 230 "loopnum≔loopnum+1"
              global loopnum=loopnum+1
              $ 231 "partleft≔partleft-1"
              global partleft=partleft-1
            end
          end
          if (partleft>0):
            global thread_handler_128=run Thread_while_128()
            while (partleft>0):
              sync()
            end
            kill thread_handler_128
          end
          $ 232 "i≔0"
          global i=0
          $ 233 "Loop (6-turnnum)>0"
          thread Thread_while_233():
            while (True):
              $ 234 "Call turntable"
              turntable()
              $ 235 "turnnum≔turnnum+1"
              global turnnum=turnnum+1
            end
          end
          if ((6-turnnum)>0):
            global thread_handler_233=run Thread_while_233()
            while ((6-turnnum)>0):
              sync()
            end
            kill thread_handler_233
          end
          $ 236 "coatnum≔coatnum-1"
          global coatnum=coatnum-1
        end
      end
      if ((coatnum)>0):
        global thread_handler_124=run Thread_while_124()
        while ((coatnum)>0):
          sync()
        end
        kill thread_handler_124
      end
      $ 237 "Halt"
      halt
    end
  end
end
