def BEOaperture():
  global _hidden_verificationVariable=0
  step_count_fb48d3ff_0c9f_4d99_a765_ea41926c28d5 = 0.0
  thread Step_Counter_Thread_a9617a2c_6c0b_4ca4_aaba_c79477845290():
    while (True):
      step_count_fb48d3ff_0c9f_4d99_a765_ea41926c28d5 = step_count_fb48d3ff_0c9f_4d99_a765_ea41926c28d5 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_a9617a2c_6c0b_4ca4_aaba_c79477845290()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.530000, [0.009000, -0.039000, 0.092000], [0.000534, 0.000534, 0.000534, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
  global Al_plate=p[0.12405209206180495,-0.2666666051843552,0.020008101224669964,-9.276623980477388E-5,1.8107917580596192E-5,3.1233857134705927]
  global Frame2x2=p[0.18266245434305164,-0.34273121659514855,0.026002571110600767,-2.225423529876215E-4,3.0110667546023537E-4,3.1233976058306383]
  global Plane_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global URlogoTutorial=p[-0.08178353973148575,-0.3363174165299142,0.04788621506469384,-3.9746155723688456E-5,-3.4682148779121894E-5,-1.5668291789091222]
  global carousel=p[0.13865255139760183,-0.25132593351268107,0.051531504137083003,-4.453572132438073E-5,-1.3071222590669835E-4,-3.1349676625391965]
  global carouselrod=p[0.2020731702281844,-0.34951442511341274,0.1947611446273096,3.139766958234101,-0.10689428010274801,-1.1796370330365635E-5]
  global paper=p[-0.09670794781244417,-0.3283412964648025,0.027665994240809913,-3.2057893450593004E-5,2.867088716161181E-5,-1.6085327915291054]
  global rod=p[0.13368013097420872,-0.41123185103490206,0.09926814901395645,2.2214229924093103,-2.2214158162465862,-2.9165882738638143E-5]
  global center1_p=p[.114184979227, -.337484031776, .113961188465, -3.141281281012, .028392666060, .002395856724]
  global center1_q=[-0.8666589895831507, -1.7623683414854945, -1.739969253540039, -1.2104264062694092, 1.5711853504180908, 3.8626654148101807]
  global c2_p=p[.033531904326, -.338018917702, .113942585511, -3.141186845400, .028487116770, .002463316714]
  global c2_q=[-1.0744670073138636, -1.6919828854002894, -1.8238770961761475, -1.1967685979655762, 1.5709176063537598, 3.6549503803253174]
  global Waypoint_1_p=p[.263501689877, -.337317763427, .239349489480, 3.139797243720, -.105347053477, -.000037720516]
  global Waypoint_1_q=[-0.5959728399859827, -2.1057659588255824, -0.6533136367797852, -1.9525557957091273, 1.5718059539794922, 4.181682586669922]
  global Waypoint_2_p=p[.265438435610, -.352444474661, .141740907029, 3.139726376264, -.105360108121, -.000022031768]
  global Waypoint_2_q=[-0.6231134573565882, -2.1016999683775843, -1.126999020576477, -1.4828875821879883, 1.5722739696502686, 4.154912948608398]
  global Waypoint_3_p=p[.206441973084, -.349241721273, .141737893294, 3.139734184252, -.105329347268, -.000022485776]
  global Waypoint_3_q=[-0.7073677221881312, -1.9410401783385218, -1.3681066036224365, -1.4024366003325959, 1.5721865892410278, 4.070710182189941]
  global Waypoint_4_p=p[.157616611756, -.378012026932, .141738203587, 3.139764187573, -.105376653239, -.000076760662]
  global Waypoint_4_q=[-0.8494070211993616, -1.9579774341978968, -1.3439116477966309, -1.409730003481247, 1.5722019672393799, 3.928692579269409]
  global Waypoint_5_p=p[.109134761588, -.393436595889, .141742225598, 3.139732501163, -.105376381431, -.000050533951]
  global Waypoint_5_q=[-0.972816292439596, -1.9523960552611292, -1.3519116640090942, -1.4072665137103577, 1.5721949338912964, 3.805286407470703]
  global Waypoint_6_p=p[-.188131250090, -.345166366147, .141750553976, 3.139727051239, -.105353578209, -.000024875816]
  global Waypoint_6_q=[-1.7293437162982386, -1.8864180050291957, -1.4439769983291626, -1.381135032778122, 1.572224736213684, 3.0487747192382812]
  global Waypoint_7_p=p[-.131564048097, -.216205376465, .141741700579, 3.139714533984, -.105382776464, -.000044168049]
  global Waypoint_7_q=[-1.572542969380514, -1.2417927545360108, -2.0833356380462646, -1.3863917154124756, 1.571577787399292, 3.2058310508728027]
  global chipC_p=p[-.099684335250, -.202962075502, .155003403114, 3.139682789872, -.105330313157, -.000079349258]
  global chipC_q=[-1.4083998839007776, -1.0823925298503418, -2.107149600982666, -1.5219560091248532, 1.5712934732437134, 3.3699164390563965]
  global Waypoint_15_p=p[-.099704296715, -.202951379992, .208432580258, 3.139670120847, -.105426183766, -.000160358536]
  global Waypoint_15_q=[-1.4082286993609827, -1.099871740942337, -1.8470300436019897, -1.764597078362936, 1.5709946155548096, 3.369927167892456]
  global Waypoint_16_p=p[-.125097928533, -.271984222044, .188211676824, -3.139810722578, .105446315311, .000070958927]
  global Waypoint_16_q=[-1.5480602423297327, -1.4491210740855713, -1.7099264860153198, -1.552596167927124, 1.5715936422348022, 3.23006010055542]
  global Waypoint_17_p=p[-.142724999180, -.369093355592, .188206916944, -3.139797376586, .105452014056, .000052913095]
  global Waypoint_17_q=[-1.6016019026385706, -1.8826486072936, -1.230006217956543, -1.5990001163878382, 1.5719895362854004, 3.1763577461242676]
  global Waypoint_18_p=p[-.142733514445, -.369095512849, .109148813088, -3.139816693145, .105496712034, .000057750100]
  global Waypoint_18_q=[-1.6016624609576624, -1.931897302667135, -1.5389282703399658, -1.2408082646182557, 1.572340965270996, 3.176706314086914]
  global Waypoint_19_p=p[-.142735936453, -.369091017762, .109149737992, 3.026208443972, .843552375154, -.000053332584]
  global Waypoint_19_q=[-1.6016739050494593, -1.931866308251852, -1.5389795303344727, -1.240760551100113, 1.5723494291305542, 2.565824508666992]
  global Waypoint_20_p=p[-.142736830669, -.369086983874, .109147750423, -3.042367299899, .783280053377, .000113361929]
  global Waypoint_20_q=[-1.6016553084002894, -1.931878229180807, -1.5389506816864014, -1.240828589802124, 1.572309970855713, 3.6135094165802]
  global Waypoint_21_p=p[-.142732029952, -.369086806798, .109147180387, 3.123975663675, -.000033785476, -.000065117948]
  global Waypoint_21_q=[-1.601966683064596, -1.9203602276244105, -1.5629665851593018, -1.2106936436942597, 1.5729100704193115, 3.10929799079895]
  global Waypoint_22_p=p[-.144538090495, -.367225253979, .187363623733, 3.139803659470, -.105396582435, -.000059541648]
  global Waypoint_22_q=[-1.606628719960348, -1.8775268993773402, -1.2408820390701294, -1.5932003460326136, 1.5719859600067139, 3.1713011264801025]
  global Waypoint_23_p=p[-.120064390322, -.465070651334, .187365924664, 2.700279766902, -.088400420341, .019763045538]
  global Waypoint_23_q=[-1.5412524382220667, -1.9475652180113734, -1.406833291053772, -0.9173591893962403, 1.5603561401367188, 3.2332537174224854]
  global Waypoint_24_p=p[-.125099110421, -.299097154487, .189878767902, 3.139750209928, -.105401717856, -.000111797080]
  global Waypoint_24_q=[-1.550074879323141, -1.5617311683348198, -1.5979981422424316, -1.5518303674510499, 1.5716702938079834, 3.2279696464538574]
  def CircleAllangles_1():
    $ 261 "CircleAllangles_1" "noBreak"
    $ 262 "p0≔p[c[0]-r,c[1],c[2],c[3],c[4],c[5]-1.5*A]"
    global p0=p[c[0]-r,c[1],c[2],c[3],c[4],c[5]-1.5*A]
    $ 263 "p45≔p[c[0]-0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]-A/1.1]"
    global p45=p[c[0]-0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]-A/1.1]
    $ 264 "p90≔p[c[0],c[1]+r,c[2],c[3]-A,c[4],c[5]]"
    global p90=p[c[0],c[1]+r,c[2],c[3]-A,c[4],c[5]]
    $ 265 "p135≔p[c[0]+0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]+A/1.1]"
    global p135=p[c[0]+0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]+A/1.1]
    $ 266 "p180≔p[c[0]+r,c[1],c[2],c[3],c[4],c[5]+1.5*A]"
    global p180=p[c[0]+r,c[1],c[2],c[3],c[4],c[5]+1.5*A]
    $ 267 "p225≔p[c[0]+0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]+A/1.1]"
    global p225=p[c[0]+0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]+A/1.1]
    $ 268 "p270≔p[c[0],c[1]-r,c[2],c[3]+A,c[4],c[5]]"
    global p270=p[c[0],c[1]-r,c[2],c[3]+A,c[4],c[5]]
    $ 269 "p315≔p[c[0]-0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]-A/1.1]"
    global p315=p[c[0]-0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]-A/1.1]
    $ 270 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 271 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 272 "MoveL"
    $ 273 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.075, r=0.01)
    $ 274 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.075, r=0.01)
    $ 275 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.075, r=0.01)
    $ 276 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.075, r=0.01)
    $ 277 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.075, r=0.01)
    $ 281 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.075, r=0.01)
    $ 282 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.075, r=0.01)
    $ 283 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.075, r=0.01)
    $ 284 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.075, r=0.01)
    $ 286 "Wait: 0.01"
    sleep(0.01)
    $ 287 "c" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(c, a=1.3, v=0.075)
    $ 299 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 300 "Wait: 0.1"
    sleep(0.1)
    $ 301 "Set atomization=Off"
    set_standard_digital_out(1, False)
  end
  def turntable():
    $ 339 "turntable" "noBreak"
    $ 340 "MoveJ"
    $ 341 "Waypoint_1" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_1_p)), qnear=Waypoint_1_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 342 "Waypoint_2" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_2_p)), qnear=Waypoint_2_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 343 "Waypoint_3" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_3_p)), qnear=Waypoint_3_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 344 "Waypoint_4" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_4_p)), qnear=Waypoint_4_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 345 "Waypoint_5" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_5_p)), qnear=Waypoint_5_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 346 "MoveJ"
    $ 347 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_6_p)), qnear=Waypoint_6_q), a=1.3962634015954636, v=0.3141592653589793)
    $ 348 "Wait: 1.0"
    sleep(1.0)
    $ 349 "MoveJ"
    $ 350 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_7_p)), qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976, r=0.02)
  end
  def Spraychip2():
    $ 351 "Spraychip2" "noBreak"
    $ 352 "MoveJ"
    $ 353 "chipC" "breakAfter"
    movej(get_inverse_kin(chipC_p, qnear=chipC_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 354 "c≔chipC"
    global c=chipC_p
    $ 355 "rc≔27/1000"
    global rc=27/1000
    $ 356 "p0≔p[c[0]+rc,c[1],c[2],c[3],c[4],c[5]-1.5*0]"
    global p0=p[c[0]+rc,c[1],c[2],c[3],c[4],c[5]-1.5*0]
    $ 357 "p45≔p[c[0]+0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]-0/1.1]"
    global p45=p[c[0]+0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]-0/1.1]
    $ 358 "p90≔p[c[0],c[1]+rc,c[2],c[3]-0,c[4],c[5]]"
    global p90=p[c[0],c[1]+rc,c[2],c[3]-0,c[4],c[5]]
    $ 359 "p135≔p[c[0]-0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]+0/1.1]"
    global p135=p[c[0]-0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]+0/1.1]
    $ 360 "p180≔p[c[0]-rc,c[1],c[2],c[3],c[4],c[5]+1.5*0]"
    global p180=p[c[0]-rc,c[1],c[2],c[3],c[4],c[5]+1.5*0]
    $ 361 "p225≔p[c[0]-0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]+0/1.1]"
    global p225=p[c[0]-0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]+0/1.1]
    $ 362 "p270≔p[c[0],c[1]-rc,c[2],c[3]+0,c[4],c[5]]"
    global p270=p[c[0],c[1]-rc,c[2],c[3]+0,c[4],c[5]]
    $ 363 "p315≔p[c[0]+0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]-0/1.1]"
    global p315=p[c[0]+0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]-0/1.1]
    $ 364 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 365 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 366 "MoveL"
    $ 367 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.07, r=0.01)
    $ 368 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.07, r=0.01)
    $ 369 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.07, r=0.01)
    $ 370 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.07, r=0.01)
    $ 371 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.07, r=0.01)
    $ 372 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 373 "Wait: 0.1"
    sleep(0.1)
    $ 374 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 375 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.07, r=0.01)
    $ 376 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.07, r=0.01)
    $ 377 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.07, r=0.01)
    $ 378 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.07, r=0.01)
    $ 379 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.07, r=0.01)
    $ 380 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 381 "Wait: 0.1"
    sleep(0.1)
    $ 382 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 383 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.07, r=0.01)
    $ 384 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.07, r=0.01)
    $ 385 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.07, r=0.01)
    $ 386 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.07, r=0.01)
    $ 387 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.07, r=0.01)
    $ 388 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.07, r=0.01)
    $ 389 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.07, r=0.01)
    $ 390 "MoveJ"
    $ 391 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 392 "Wait: 0.2"
    sleep(0.2)
    $ 393 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 394 "Wait: 0.1"
    sleep(0.1)
    $ 395 "Set atomization=Off"
    set_standard_digital_out(1, False)
  end
  def clean():
    $ 435 "clean" "noBreak"
    $ 436 "MoveJ"
    $ 437 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 438 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 439 "MoveL"
    $ 440 "Waypoint_18" "breakAfter"
    movel(Waypoint_18_p, a=1.2, v=0.05)
    $ 441 "MoveL"
    $ 442 "Waypoint_19" "breakAfter"
    movel(Waypoint_19_p, a=1.2, v=0.05)
    $ 443 "MoveL"
    $ 444 "Waypoint_20" "breakAfter"
    movel(Waypoint_20_p, a=1.2, v=0.05)
    $ 445 "MoveL"
    $ 446 "Waypoint_21" "breakAfter"
    movel(Waypoint_21_p, a=1.2, v=0.05)
    $ 447 "MoveL"
    $ 448 "Waypoint_22" "breakAfter"
    movel(Waypoint_22_p, a=1.2, v=0.25)
    $ 449 "MoveJ"
    $ 450 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 451 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 452 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 453 "Wait: 0.2"
    sleep(0.2)
    $ 454 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 455 "Wait: 0.1"
    sleep(0.1)
    $ 456 "Set atomization=Off"
    set_standard_digital_out(1, False)
    $ 457 "MoveJ"
    $ 458 "Waypoint_24" "breakAfter"
    movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  while (True):
    $ 2 "Robot Program"
    $ 3 "'Program is to be used for part #124570-001 rev A BEO TX aperture'"
    # 'Program is to be used for part #124570-001 rev A BEO TX aperture'
    $ 4 "'Program rev A: 8/8/24 adjusted chip center height for better representation of coating on parts'"
    # 'Program rev A: 8/8/24 adjusted chip center height for better representation of coating on parts'
    $ 5 "r≔29/1000"
    global r=29/1000
    $ 6 "A≔0"
    global A=0
    $ 8 "partnum≔2"
    global partnum=2
    $ 10 "coatnum≔2"
    global coatnum=2
    $ 11 "sidenum≔1"
    global sidenum=1
    $ 13 "A≔A*3.1416/180"
    global A=A*3.1416/180
    $ 14 "Loop_1≔1"
    global Loop_1=1
    $ 76 "If partnum≤sidenum"
    global thread_flag_76=0
    thread Thread_if_76():
      $ 77 "Loop (coatnum)>0"
      thread Thread_while_77():
        while (True):
          $ 78 "partleft≔partnum"
          global partleft=partnum
          $ 79 "loopnum≔1"
          global loopnum=1
          $ 80 "Loop partleft>0"
          thread Thread_while_80():
            while (True):
              $ 81 "Call clean"
              clean()
              $ 82 "Call Spraychip2"
              Spraychip2()
              $ 83 "If loopnum≟1 or loopnum≟3 or loopnum≟5 or loopnum≟7 or loopnum≟9 or loopnum≟11"
              global thread_flag_83=0
              thread Thread_if_83():
                $ 113 "MoveJ"
                $ 114 "center1" "breakAfter"
                set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                movej(get_inverse_kin(center1_p, qnear=center1_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 115 "c≔center1"
                global c=center1_p
                $ 116 "Call CircleAllangles_1"
                CircleAllangles_1()
                thread_flag_83 = 1
              end
              if (loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                global thread_handler_83=run Thread_if_83()
                while (thread_flag_83 == 0):
                  if not(loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                    kill thread_handler_83
                    thread_flag_83 = 2
                  else:
                    sync()
                  end
                end
              else:
                thread_flag_83 = 2
              end
              if (thread_flag_83 == 2):
                $ 117 "Else" "noBreak"
                $ 146 "MoveJ"
                $ 147 "c2" "breakAfter"
                set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                movej(get_inverse_kin(c2_p, qnear=c2_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 148 "c≔c2"
                global c=c2_p
                $ 149 "Call CircleAllangles_1"
                CircleAllangles_1()
              end
              $ 150 "loopnum≔loopnum+1"
              global loopnum=loopnum+1
              $ 151 "partleft≔partleft-1"
              global partleft=partleft-1
            end
          end
          if (partleft>0):
            global thread_handler_80=run Thread_while_80()
            while (partleft>0):
              sync()
            end
            kill thread_handler_80
          end
          $ 152 "i≔0"
          global i=0
          $ 153 "coatnum≔coatnum-1"
          global coatnum=coatnum-1
        end
      end
      if ((coatnum)>0):
        global thread_handler_77=run Thread_while_77()
        while ((coatnum)>0):
          sync()
        end
        kill thread_handler_77
      end
      $ 154 "Halt"
      halt
      thread_flag_76 = 1
    end
    if (partnum <= sidenum):
      global thread_handler_76=run Thread_if_76()
      while (thread_flag_76 == 0):
        if not(partnum <= sidenum):
          kill thread_handler_76
          thread_flag_76 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_76 = 2
    end
    if (thread_flag_76 == 2):
      $ 155 "Else" "noBreak"
      $ 156 "Loop (coatnum)>0"
      thread Thread_while_156():
        while (True):
          $ 157 "partleft≔partnum"
          global partleft=partnum
          $ 158 "loopnum≔1"
          global loopnum=1
          $ 159 "turnnum≔0"
          global turnnum=0
          $ 160 "Loop partleft>0"
          thread Thread_while_160():
            while (True):
              $ 161 "Call clean"
              clean()
              $ 162 "Call Spraychip2"
              Spraychip2()
              $ 163 "If loopnum≟1 or loopnum≟3 or loopnum≟5 or loopnum≟7 or loopnum≟9 or loopnum≟11"
              global thread_flag_163=0
              thread Thread_if_163():
                $ 193 "MoveJ"
                $ 194 "center1" "breakAfter"
                set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                movej(get_inverse_kin(center1_p, qnear=center1_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 195 "c≔center1"
                global c=center1_p
                $ 196 "Call CircleAllangles_1"
                CircleAllangles_1()
                thread_flag_163 = 1
              end
              if (loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                global thread_handler_163=run Thread_if_163()
                while (thread_flag_163 == 0):
                  if not(loopnum == 1  or  loopnum == 3  or  loopnum == 5  or  loopnum == 7  or  loopnum == 9  or  loopnum == 11):
                    kill thread_handler_163
                    thread_flag_163 = 2
                  else:
                    sync()
                  end
                end
              else:
                thread_flag_163 = 2
              end
              if (thread_flag_163 == 2):
                $ 197 "Else" "noBreak"
                $ 228 "MoveJ"
                $ 229 "c2" "breakAfter"
                set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                movej(get_inverse_kin(c2_p, qnear=c2_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 230 "c≔c2"
                global c=c2_p
                $ 231 "Call CircleAllangles_1"
                CircleAllangles_1()
              end
              $ 232 "loopnum≔loopnum+1"
              global loopnum=loopnum+1
              $ 233 "partleft≔partleft-1"
              global partleft=partleft-1
            end
          end
          if (partleft>0):
            global thread_handler_160=run Thread_while_160()
            while (partleft>0):
              sync()
            end
            kill thread_handler_160
          end
          $ 234 "i≔0"
          global i=0
          $ 235 "Loop (6-turnnum)>0"
          thread Thread_while_235():
            while (True):
              $ 236 "Call turntable"
              turntable()
              $ 237 "turnnum≔turnnum+1"
              global turnnum=turnnum+1
            end
          end
          if ((6-turnnum)>0):
            global thread_handler_235=run Thread_while_235()
            while ((6-turnnum)>0):
              sync()
            end
            kill thread_handler_235
          end
          $ 238 "coatnum≔coatnum-1"
          global coatnum=coatnum-1
        end
      end
      if ((coatnum)>0):
        global thread_handler_156=run Thread_while_156()
        while ((coatnum)>0):
          sync()
        end
        kill thread_handler_156
      end
      $ 239 "Halt"
      halt
    end
  end
end
