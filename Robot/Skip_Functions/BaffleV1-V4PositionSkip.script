def BaffleV1V4PositionSkip():
  global _hidden_verificationVariable=0
  step_count_8ad7a574_be85_4c43_83e5_24d232c1306c = 0.0
  thread Step_Counter_Thread_13a5a3af_83ab_479a_86d5_70c2b47d7d05():
    while (True):
      step_count_8ad7a574_be85_4c43_83e5_24d232c1306c = step_count_8ad7a574_be85_4c43_83e5_24d232c1306c + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_13a5a3af_83ab_479a_86d5_70c2b47d7d05()
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(0.530000, [0.009000, -0.039000, 0.092000], [0.000534, 0.000534, 0.000534, 0.000000, 0.000000, 0.000000])
  global Al_plate=p[0.12405209206180495,-0.2666666051843552,0.020008101224669964,-9.276623980477388E-5,1.8107917580596192E-5,3.1233857134705927]
  global Frame2x2=p[0.18266245434305164,-0.34273121659514855,0.026002571110600767,-2.225423529876215E-4,3.0110667546023537E-4,3.1233976058306383]
  global Plane_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global URlogoTutorial=p[-0.08178353973148575,-0.3363174165299142,0.04788621506469384,-3.9746155723688456E-5,-3.4682148779121894E-5,-1.5668291789091222]
  global carousel=p[0.13865255139760183,-0.25132593351268107,0.051531504137083003,-4.453572132438073E-5,-1.3071222590669835E-4,-3.1349676625391965]
  global carouselrod=p[0.2020731702281844,-0.34951442511341274,0.1947611446273096,3.139766958234101,-0.10689428010274801,-1.1796370330365635E-5]
  global paper=p[-0.09670794781244417,-0.3283412964648025,0.027665994240809913,-3.2057893450593004E-5,2.867088716161181E-5,-1.6085327915291054]
  global rod=p[0.13368013097420872,-0.41123185103490206,0.09926814901395645,2.2214229924093103,-2.2214158162465862,-2.9165882738638143E-5]
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  global center1_p=p[.110969442600, -.299999279817, .161980948649, -3.141238685111, .028569760165, .002602199902]
  global center1_q=[-0.7930257956134241, -1.5525236886790772, -1.737891435623169, -1.4225436759046097, 1.5708422660827637, 3.936228036880493]
  global Waypoint_9_p=p[-.150708861961, -.348227279771, .151556678779, -3.140981415271, -.055839736306, -.000005615584]
  global Waypoint_9_q=[-1.6259835402118128, -1.8204313717284144, -1.484473705291748, -1.4068395358375092, 1.5721334218978882, 3.049475908279419]
  global c2_p=p[.033579761211, -.300525341211, .162013685505, -3.141224571618, .028519963281, .002544252248]
  global c2_q=[-1.0097201506244105, -1.472250060444214, -1.8126556873321533, -1.4277964246324082, 1.5705384016036987, 3.7195310592651367]
  global c3_p=p[-.042028179709, -.301007733296, .161992176494, -3.141172644196, .028620633361, .002688410540]
  global c3_q=[-1.2619312445269983, -1.4790399980596085, -1.8068242073059082, -1.426572398548462, 1.5702457427978516, 3.4673821926116943]
  global c4_p=p[-.118021198238, -.301495282808, .161952819443, -3.141115513093, .028488240093, .002642523285]
  global c4_q=[-1.5254152456866663, -1.5692032140544434, -1.7219094038009644, -1.4209525895169755, 1.570211410522461, 3.203781843185425]
  global c1_p=p[.157577147953, -.388190086959, .151522802335, -3.141047500236, -.055722937685, .000049173003]
  global c1_q=[-0.8664591948138636, -1.9946533642210902, -1.2442758083343506, -1.4727600377849122, 1.5722702741622925, 3.80899977684021]
  global Waypoint_8_p=p[-.150427162654, -.390225762120, .151546909862, -3.141036571135, -.055876152350, -.000047259053]
  global Waypoint_8_q=[-1.6194260756122034, -1.9913011989989222, -1.2490886449813843, -1.4713011544993897, 1.5722861289978027, 3.055936574935913]
  global Waypoint_1_p=p[.263501689877, -.337317763427, .239349489480, 3.139797243720, -.105347053477, -.000037720516]
  global Waypoint_1_q=[-0.5959728399859827, -2.1057659588255824, -0.6533136367797852, -1.9525557957091273, 1.5718059539794922, 4.181682586669922]
  global Waypoint_2_p=p[.265438435610, -.352444474661, .141740907029, 3.139726376264, -.105360108121, -.000022031768]
  global Waypoint_2_q=[-0.6231134573565882, -2.1016999683775843, -1.126999020576477, -1.4828875821879883, 1.5722739696502686, 4.154912948608398]
  global Waypoint_3_p=p[.206441973084, -.349241721273, .141737893294, 3.139734184252, -.105329347268, -.000022485776]
  global Waypoint_3_q=[-0.7073677221881312, -1.9410401783385218, -1.3681066036224365, -1.4024366003325959, 1.5721865892410278, 4.070710182189941]
  global Waypoint_4_p=p[.157616611756, -.378012026932, .141738203587, 3.139764187573, -.105376653239, -.000076760662]
  global Waypoint_4_q=[-0.8494070211993616, -1.9579774341978968, -1.3439116477966309, -1.409730003481247, 1.5722019672393799, 3.928692579269409]
  global Waypoint_5_p=p[.109134761588, -.393436595889, .141742225598, 3.139732501163, -.105376381431, -.000050533951]
  global Waypoint_5_q=[-0.972816292439596, -1.9523960552611292, -1.3519116640090942, -1.4072665137103577, 1.5721949338912964, 3.805286407470703]
  global Waypoint_6_p=p[-.188131250090, -.345166366147, .141750553976, 3.139727051239, -.105353578209, -.000024875816]
  global Waypoint_6_q=[-1.7293437162982386, -1.8864180050291957, -1.4439769983291626, -1.381135032778122, 1.572224736213684, 3.0487747192382812]
  global Waypoint_7_p=p[-.131564048097, -.216205376465, .141741700579, 3.139714533984, -.105382776464, -.000044168049]
  global Waypoint_7_q=[-1.572542969380514, -1.2417927545360108, -2.0833356380462646, -1.3863917154124756, 1.571577787399292, 3.2058310508728027]
  global chipC_p=p[-.099700808826, -.202952757881, .164996718325, 3.139674473859, -.105422761183, -.000155976737]
  global chipC_q=[-1.4083831946002405, -1.0812185567668458, -2.0607998371124268, -1.5694840830149879, 1.571197271347046, 3.3699474334716797]
  global Waypoint_15_p=p[-.099704296715, -.202951379992, .208432580258, 3.139670120847, -.105426183766, -.000160358536]
  global Waypoint_15_q=[-1.4082286993609827, -1.099871740942337, -1.8470300436019897, -1.764597078362936, 1.5709946155548096, 3.369927167892456]
  global Waypoint_16_p=p[-.125097928533, -.271984222044, .188211676824, -3.139810722578, .105446315311, .000070958927]
  global Waypoint_16_q=[-1.5480602423297327, -1.4491210740855713, -1.7099264860153198, -1.552596167927124, 1.5715936422348022, 3.23006010055542]
  global Waypoint_17_p=p[-.134817099175, -.369043356199, .188207379413, -3.139798688723, .105411753785, .000101833251]
  global Waypoint_17_q=[-1.580324951802389, -1.8696137867369593, -1.247509479522705, -1.5945331058897914, 1.5719499588012695, 3.1976139545440674]
  global Waypoint_18_p=p[-.134831159875, -.369049717019, .108607138477, -3.139808419965, .105470463102, .000145074178]
  global Waypoint_18_q=[-1.5803912321673792, -1.9209920368590296, -1.5570995807647705, -1.2335533958724518, 1.5722789764404297, 3.197969913482666]
  global Waypoint_19_p=p[-.134832409761, -.369048431362, .108605702843, -3.094506038516, .541790240243, .000125743047]
  global Waypoint_19_q=[-1.5804031530963343, -1.9210039577879847, -1.5570842027664185, -1.2335701447776337, 1.5722945928573608, 3.477449655532837]
  global Waypoint_20_p=p[-.134826206776, -.369039501521, .108601285242, -3.091646159857, -.557799413861, .000088594123]
  global Waypoint_20_q=[-1.5803950468646448, -1.9209643803038539, -1.557166337966919, -1.2335177224925538, 1.572309970855713, 2.77380633354187]
  global Waypoint_22_p=p[-.129002855245, -.367125333468, .187368959227, 3.139793107609, -.105355616558, -.000048315489]
  global Waypoint_22_q=[-1.5645673910724085, -1.8522659740843714, -1.2744755744934082, -1.5848571262755335, 1.5719740390777588, 3.213346242904663]
  global Waypoint_23_p=p[-.120064390322, -.465070651334, .187365924664, 2.700279766902, -.088400420341, .019763045538]
  global Waypoint_23_q=[-1.5412524382220667, -1.9475652180113734, -1.406833291053772, -0.9173591893962403, 1.5603561401367188, 3.2332537174224854]
  global Waypoint_24_p=p[-.125099110421, -.299097154487, .189878767902, 3.139750209928, -.105401717856, -.000111797080]
  global Waypoint_24_q=[-1.550074879323141, -1.5617311683348198, -1.5979981422424316, -1.5518303674510499, 1.5716702938079834, 3.2279696464538574]
  def CircleAllangles_1():
    $ 304 "CircleAllangles_1" "noBreak"
    $ 305 "p0≔p[c[0]-r,c[1],c[2],c[3],c[4],c[5]-1.5*A]"
    global p0=p[c[0]-r,c[1],c[2],c[3],c[4],c[5]-1.5*A]
    $ 306 "p45≔p[c[0]-0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]-A/1.1]"
    global p45=p[c[0]-0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]-A/1.1]
    $ 307 "p90≔p[c[0],c[1]+r,c[2],c[3]-A,c[4],c[5]]"
    global p90=p[c[0],c[1]+r,c[2],c[3]-A,c[4],c[5]]
    $ 308 "p135≔p[c[0]+0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]+A/1.1]"
    global p135=p[c[0]+0.71*r,c[1]+0.71*r,c[2],c[3]-A/1.1,c[4],c[5]+A/1.1]
    $ 309 "p180≔p[c[0]+r,c[1],c[2],c[3],c[4],c[5]+1.5*A]"
    global p180=p[c[0]+r,c[1],c[2],c[3],c[4],c[5]+1.5*A]
    $ 310 "p225≔p[c[0]+0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]+A/1.1]"
    global p225=p[c[0]+0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]+A/1.1]
    $ 311 "p270≔p[c[0],c[1]-r,c[2],c[3]+A,c[4],c[5]]"
    global p270=p[c[0],c[1]-r,c[2],c[3]+A,c[4],c[5]]
    $ 312 "p315≔p[c[0]-0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]-A/1.1]"
    global p315=p[c[0]-0.71*r,c[1]-0.71*r,c[2],c[3]+A/1.1,c[4],c[5]-A/1.1]
    $ 313 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 314 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 315 "MoveL"
    $ 316 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.27, r=0.01)
    $ 317 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.27, r=0.01)
    $ 318 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.27, r=0.01)
    $ 319 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.27, r=0.01)
    $ 320 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.27, r=0.01)
    $ 321 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 322 "Wait: 0.1"
    sleep(0.1)
    $ 323 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 324 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.27, r=0.01)
    $ 325 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.27, r=0.01)
    $ 326 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.27, r=0.01)
    $ 327 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.27, r=0.01)
    $ 328 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.27, r=0.01)
    $ 329 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 330 "Wait: 0.1"
    sleep(0.1)
    $ 331 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 332 "Wait: 0.1"
    sleep(0.1)
    $ 333 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.27, r=0.01)
    $ 334 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.27, r=0.01)
    $ 335 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.27, r=0.01)
    $ 336 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.27, r=0.01)
    $ 337 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.27, r=0.01)
    $ 338 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.27, r=0.01)
    $ 339 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.27, r=0.01)
    $ 340 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 341 "Wait: 0.1"
    sleep(0.1)
    $ 342 "Set atomization=Off"
    set_standard_digital_out(1, False)
  end
  def turntable():
    $ 381 "turntable" "noBreak"
    $ 382 "MoveJ"
    $ 383 "Waypoint_1" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_1_p)), qnear=Waypoint_1_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 384 "Waypoint_2" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_2_p)), qnear=Waypoint_2_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 385 "Waypoint_3" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_3_p)), qnear=Waypoint_3_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 386 "Waypoint_4" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_4_p)), qnear=Waypoint_4_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 387 "Waypoint_5" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_5_p)), qnear=Waypoint_5_q), a=1.3962634015954636, v=0.5235987755982988, r=0.02)
    $ 388 "MoveJ"
    $ 389 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_6_p)), qnear=Waypoint_6_q), a=1.3962634015954636, v=0.3141592653589793)
    $ 390 "Wait: 1.0"
    sleep(1.0)
    $ 391 "MoveJ"
    $ 392 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(pose_trans(carouselrod, pose_trans(p[-.225374943892, -.334963115579, .194760490892, -3.139766958285, .106894280104, .000011796367], Waypoint_7_p)), qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976, r=0.02)
  end
  def Spraychip2():
    $ 393 "Spraychip2" "noBreak"
    $ 394 "MoveJ"
    $ 395 "chipC" "breakAfter"
    movej(get_inverse_kin(chipC_p, qnear=chipC_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 396 "c≔chipC"
    global c=chipC_p
    $ 397 "rc≔27/1000"
    global rc=27/1000
    $ 398 "p0≔p[c[0]+rc,c[1],c[2],c[3],c[4],c[5]-1.5*0]"
    global p0=p[c[0]+rc,c[1],c[2],c[3],c[4],c[5]-1.5*0]
    $ 399 "p45≔p[c[0]+0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]-0/1.1]"
    global p45=p[c[0]+0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]-0/1.1]
    $ 400 "p90≔p[c[0],c[1]+rc,c[2],c[3]-0,c[4],c[5]]"
    global p90=p[c[0],c[1]+rc,c[2],c[3]-0,c[4],c[5]]
    $ 401 "p135≔p[c[0]-0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]+0/1.1]"
    global p135=p[c[0]-0.71*rc,c[1]+0.71*rc,c[2],c[3]-0/1.1,c[4],c[5]+0/1.1]
    $ 402 "p180≔p[c[0]-rc,c[1],c[2],c[3],c[4],c[5]+1.5*0]"
    global p180=p[c[0]-rc,c[1],c[2],c[3],c[4],c[5]+1.5*0]
    $ 403 "p225≔p[c[0]-0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]+0/1.1]"
    global p225=p[c[0]-0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]+0/1.1]
    $ 404 "p270≔p[c[0],c[1]-rc,c[2],c[3]+0,c[4],c[5]]"
    global p270=p[c[0],c[1]-rc,c[2],c[3]+0,c[4],c[5]]
    $ 405 "p315≔p[c[0]+0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]-0/1.1]"
    global p315=p[c[0]+0.71*rc,c[1]-0.71*rc,c[2],c[3]+0/1.1,c[4],c[5]-0/1.1]
    $ 406 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 407 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 408 "MoveL"
    $ 409 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.07, r=0.01)
    $ 410 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.07, r=0.01)
    $ 411 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.07, r=0.01)
    $ 412 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.07, r=0.01)
    $ 413 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.07, r=0.01)
    $ 414 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 415 "Wait: 0.1"
    sleep(0.1)
    $ 416 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 417 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.07, r=0.01)
    $ 418 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.07, r=0.01)
    $ 419 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.07, r=0.01)
    $ 420 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.07, r=0.01)
    $ 421 "p45" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p45, a=1.3, v=0.07, r=0.01)
    $ 422 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 423 "Wait: 0.1"
    sleep(0.1)
    $ 424 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 425 "p90" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p90, a=1.3, v=0.07, r=0.01)
    $ 426 "p135" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p135, a=1.3, v=0.07, r=0.01)
    $ 427 "p180" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p180, a=1.3, v=0.07, r=0.01)
    $ 428 "p225" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p225, a=1.3, v=0.07, r=0.01)
    $ 429 "p270" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p270, a=1.3, v=0.07, r=0.01)
    $ 430 "p315" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p315, a=1.3, v=0.07, r=0.01)
    $ 431 "p0" "breakAfter"
    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
    movel(p0, a=1.3, v=0.07, r=0.01)
    $ 432 "MoveJ"
    $ 433 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 434 "Wait: 0.2"
    sleep(0.2)
    $ 435 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 436 "Wait: 0.1"
    sleep(0.1)
    $ 437 "Set atomization=Off"
    set_standard_digital_out(1, False)
  end
  def clean():
    $ 477 "clean" "noBreak"
    $ 478 "MoveJ"
    $ 479 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 480 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 481 "MoveL"
    $ 482 "Waypoint_18" "breakAfter"
    movel(Waypoint_18_p, a=1.2, v=0.05)
    $ 483 "MoveL"
    $ 484 "Waypoint_19" "breakAfter"
    movel(Waypoint_19_p, a=1.2, v=0.05)
    $ 485 "MoveL"
    $ 486 "Waypoint_20" "breakAfter"
    movel(Waypoint_20_p, a=1.2, v=0.05)
    $ 489 "MoveL"
    $ 490 "Waypoint_22" "breakAfter"
    movel(Waypoint_22_p, a=1.2, v=0.25)
    $ 491 "MoveJ"
    $ 492 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 493 "Set atomization=On"
    set_standard_digital_out(1, True)
    $ 494 "Set triggersolenoid=On"
    set_standard_digital_out(0, True)
    $ 495 "Wait: 0.2"
    sleep(0.2)
    $ 496 "Set triggersolenoid=Off"
    set_standard_digital_out(0, False)
    $ 497 "Wait: 0.1"
    sleep(0.1)
    $ 498 "Set atomization=Off"
    set_standard_digital_out(1, False)
    $ 499 "MoveJ"
    $ 500 "Waypoint_24" "breakAfter"
    movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  while (True):
    $ 2 "Robot Program"
    $ 3 "'Program to be used for part #111555-062, 026, 024, 022 star tracker vanes 1-4 on the concave side'"
    # 'Program to be used for part #111555-062, 026, 024, 022 star tracker vanes 1-4 on the concave side'
    $ 4 "'Program rev A: 7/23/24 moved centers 2mm right and 2mm towards center for better spray coverage'"
    # 'Program rev A: 7/23/24 moved centers 2mm right and 2mm towards center for better spray coverage'
    $ 5 "'Program rev B: 8/9/24 moved centers 1mm left for better spray coverage and lowered chip center to better represent coverage of parts'"
    # 'Program rev B: 8/9/24 moved centers 1mm left for better spray coverage and lowered chip center to better represent coverage of parts'
    $ 6 "L≔3/1000"
    global L=3/1000
    $ 7 "r≔30/1000"
    global r=30/1000
    $ 8 "A≔25"
    global A=25
    $ 9 "A≔A*3.1416/180"
    global A=A*3.1416/180
    $ 10 "w≔3/1000"
    global w=3/1000
    $ 13 "current_coat≔1"
    global current_coat=1
    $ 15 "position≔1"
    global position=1
    $ 16 "Loop_1≔1"
    global Loop_1=1
    $ 210 "coatnum≔2"
    global coatnum=2
    $ 212 "partnum≔2"
    global partnum=2
    $ 213 "sidenum≔4"
    global sidenum=4
    $ 214 "If partnum≤sidenum"
    global thread_flag_214=0
    thread Thread_if_214():
      $ 215 "Loop (coatnum)>0"
      thread Thread_while_215():
        while (True):
          $ 216 "partleft≔partnum"
          global partleft=partnum
          $ 217 "loopnum≔1"
          global loopnum=1
          $ 218 "Loop partleft>0"
          thread Thread_while_218():
            while (True):
              $ 219 "Call clean"
              clean()
              $ 220 "Call Spraychip2"
              Spraychip2()
              $ 221 "If loopnum≟1 or loopnum≟5 or loopnum≟9"
              global thread_flag_221=0
              thread Thread_if_221():
                $ 222 "MoveJ"
                $ 223 "center1" "breakAfter"
                set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                movej(get_inverse_kin(center1_p, qnear=center1_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 224 "c≔center1"
                global c=center1_p
                $ 225 "c≔p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]"
                global c=p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]
                $ 226 "c" "breakAfter"
                set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                movej(c, a=1.3962634015954636, v=1.0471975511965976)
                $ 227 "Call CircleAllangles_1"
                CircleAllangles_1()
                thread_flag_221 = 1
              end
              if (loopnum == 1  or  loopnum == 5  or  loopnum == 9):
                global thread_handler_221=run Thread_if_221()
                while (thread_flag_221 == 0):
                  if not(loopnum == 1  or  loopnum == 5  or  loopnum == 9):
                    kill thread_handler_221
                    thread_flag_221 = 2
                  else:
                    sync()
                  end
                end
              else:
                thread_flag_221 = 2
              end
              if (thread_flag_221 == 2):
                $ 228 "ElseIf loopnum≟2 or loopnum≟6 or loopnum≟10"
                if (loopnum == 2  or  loopnum == 6  or  loopnum == 10):
                  $ 229 "MoveJ"
                  $ 230 "Waypoint_9" "breakAfter"
                  movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
                  $ 231 "Set atomization=On"
                  set_standard_digital_out(1, True)
                  $ 232 "Set triggersolenoid=On"
                  set_standard_digital_out(0, True)
                  $ 233 "MoveL"
                  $ 234 "c2" "breakAfter"
                  movel(c2_p, a=1.2, v=0.2)
                  $ 235 "Set triggersolenoid=Off"
                  set_standard_digital_out(0, False)
                  $ 236 "Wait: 0.1"
                  sleep(0.1)
                  $ 237 "Set atomization=Off"
                  set_standard_digital_out(1, False)
                else:
                  $ 238 "ElseIf loopnum≟3 or loopnum≟7 or loopnum≟11"
                  if (loopnum == 3  or  loopnum == 7  or  loopnum == 11):
                    $ 239 "MoveJ"
                    $ 240 "c3" "breakAfter"
                    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                    movej(get_inverse_kin(c3_p, qnear=c3_q), a=1.3962634015954636, v=1.0471975511965976)
                    $ 241 "c≔c3"
                    global c=c3_p
                    $ 242 "c≔p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]"
                    global c=p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]
                    $ 243 "c" "breakAfter"
                    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                    movej(c, a=1.3962634015954636, v=1.0471975511965976)
                    $ 244 "Call CircleAllangles_1"
                    CircleAllangles_1()
                  else:
                    $ 245 "Else" "noBreak"
                    $ 246 "MoveJ"
                    $ 247 "c4" "breakAfter"
                    movej(get_inverse_kin(c4_p, qnear=c4_q), a=1.3962634015954636, v=1.0471975511965976)
                    $ 248 "c≔c4"
                    global c=c4_p
                    $ 249 "c≔p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]"
                    global c=p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]
                    $ 250 "c" "breakAfter"
                    movej(c, a=1.3962634015954636, v=1.0471975511965976)
                    $ 251 "Call CircleAllangles_1"
                    CircleAllangles_1()
                  end
                end
              end
              $ 252 "loopnum≔loopnum+1"
              global loopnum=loopnum+1
              $ 253 "partleft≔partleft-1"
              global partleft=partleft-1
            end
          end
          if (partleft>0):
            global thread_handler_218=run Thread_while_218()
            while (partleft>0):
              sync()
            end
            kill thread_handler_218
          end
          $ 254 "i≔0"
          global i=0
          $ 255 "coatnum≔coatnum-1"
          global coatnum=coatnum-1
        end
      end
      if ((coatnum)>0):
        global thread_handler_215=run Thread_while_215()
        while ((coatnum)>0):
          sync()
        end
        kill thread_handler_215
      end
      $ 256 "Halt"
      halt
      thread_flag_214 = 1
    end
    if (partnum <= sidenum):
      global thread_handler_214=run Thread_if_214()
      while (thread_flag_214 == 0):
        if not(partnum <= sidenum):
          kill thread_handler_214
          thread_flag_214 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_214 = 2
    end
    if (thread_flag_214 == 2):
      $ 257 "Else" "noBreak"
      $ 258 "Loop (coatnum)>0"
      thread Thread_while_258():
        while (True):
          $ 259 "partleft≔partnum"
          global partleft=partnum
          $ 260 "loopnum≔1"
          global loopnum=1
          $ 261 "turnnum≔0"
          global turnnum=0
          $ 262 "Loop partleft>0"
          thread Thread_while_262():
            while (True):
              $ 263 "Call clean"
              clean()
              $ 264 "Call Spraychip2"
              Spraychip2()
              $ 265 "If loopnum≟1 or loopnum≟5 or loopnum≟9"
              global thread_flag_265=0
              thread Thread_if_265():
                $ 266 "MoveJ"
                $ 267 "c1" "breakAfter"
                movej(get_inverse_kin(c1_p, qnear=c1_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 268 "Set atomization=On"
                set_standard_digital_out(1, True)
                $ 269 "Set triggersolenoid=On"
                set_standard_digital_out(0, True)
                $ 270 "MoveL"
                $ 271 "Waypoint_8" "breakAfter"
                movel(Waypoint_8_p, a=1.2, v=0.2)
                $ 272 "Set triggersolenoid=Off"
                set_standard_digital_out(0, False)
                $ 273 "Wait: 0.1"
                sleep(0.1)
                $ 274 "Set atomization=Off"
                set_standard_digital_out(1, False)
                thread_flag_265 = 1
              end
              if (loopnum == 1  or  loopnum == 5  or  loopnum == 9):
                global thread_handler_265=run Thread_if_265()
                while (thread_flag_265 == 0):
                  if not(loopnum == 1  or  loopnum == 5  or  loopnum == 9):
                    kill thread_handler_265
                    thread_flag_265 = 2
                  else:
                    sync()
                  end
                end
              else:
                thread_flag_265 = 2
              end
              if (thread_flag_265 == 2):
                $ 275 "ElseIf loopnum≟2 or loopnum≟6 or loopnum≟10"
                if (loopnum == 2  or  loopnum == 6  or  loopnum == 10):
                  $ 276 "MoveJ"
                  $ 277 "c2" "breakAfter"
                  set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                  movej(get_inverse_kin(c2_p, qnear=c2_q), a=1.3962634015954636, v=1.0471975511965976)
                  $ 278 "c≔c2"
                  global c=c2_p
                  $ 279 "c≔p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]"
                  global c=p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]
                  $ 280 "c" "breakAfter"
                  set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                  movej(c, a=1.3962634015954636, v=1.0471975511965976)
                  $ 281 "Call CircleAllangles_1"
                  CircleAllangles_1()
                else:
                  $ 282 "ElseIf loopnum≟3 or loopnum≟7 or loopnum≟11"
                  if (loopnum == 3  or  loopnum == 7  or  loopnum == 11):
                    $ 283 "MoveJ"
                    $ 284 "c3" "breakAfter"
                    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                    movej(get_inverse_kin(c3_p, qnear=c3_q), a=1.3962634015954636, v=1.0471975511965976)
                    $ 285 "c≔c3"
                    global c=c3_p
                    $ 286 "c≔p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]"
                    global c=p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]
                    $ 287 "c" "breakAfter"
                    set_tcp(p[0.0,0.0,0.11,0.0,0.0,0.0])
                    movej(c, a=1.3962634015954636, v=1.0471975511965976)
                    $ 288 "Call CircleAllangles_1"
                    CircleAllangles_1()
                  else:
                    $ 289 "Else" "noBreak"
                    $ 290 "MoveJ"
                    $ 291 "c4" "breakAfter"
                    movej(get_inverse_kin(c4_p, qnear=c4_q), a=1.3962634015954636, v=1.0471975511965976)
                    $ 292 "c≔c4"
                    global c=c4_p
                    $ 293 "c≔p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]"
                    global c=p[c[0],c[1],c[2]+20/1000,c[3],c[4],c[5]]
                    $ 294 "c" "breakAfter"
                    movej(c, a=1.3962634015954636, v=1.0471975511965976)
                    $ 295 "Call CircleAllangles_1"
                    CircleAllangles_1()
                  end
                end
              end
              $ 296 "loopnum≔loopnum+1"
              global loopnum=loopnum+1
              $ 297 "partleft≔partleft-1"
              global partleft=partleft-1
            end
          end
          if (partleft>0):
            global thread_handler_262=run Thread_while_262()
            while (partleft>0):
              sync()
            end
            kill thread_handler_262
          end
          $ 298 "i≔0"
          global i=0
          $ 299 "Loop (6-turnnum)>0"
          thread Thread_while_299():
            while (True):
              $ 300 "Call turntable"
              turntable()
              $ 301 "turnnum≔turnnum+1"
              global turnnum=turnnum+1
            end
          end
          if ((6-turnnum)>0):
            global thread_handler_299=run Thread_while_299()
            while ((6-turnnum)>0):
              sync()
            end
            kill thread_handler_299
          end
          $ 302 "coatnum≔coatnum-1"
          global coatnum=coatnum-1
        end
      end
      if ((coatnum)>0):
        global thread_handler_258=run Thread_while_258()
        while ((coatnum)>0):
          sync()
        end
        kill thread_handler_258
      end
      $ 303 "Halt"
      halt
    end
  end
end
